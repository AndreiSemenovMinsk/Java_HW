import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

import controller.Command;

class Controller {
	
	private final CommandProvider commandProvider = new CommandProvider();
    //response
	public String doAction(String request){
	
		System.out.println(request);
		
	String[] params = request.split(",");
	
	String commandName = params[0].trim();
	
	Command command = commandProvider.getCommand(commandName);
	
	System.out.println("Notebook"+params[1]);
	
	String response = command.execute(params);
	
	return response;			
	}
}

class Loginator {
	
	public String username;
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((username == null) ? 0 : username.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof Loginator)) {
			return false;
		}
		Loginator other = (Loginator) obj;
		if (username == null) {
			if (other.username != null) {
				return false;
			}
		} else if (!username.equals(other.username)) {
			return false;
		}
		return true;
	}

	public double authorization(String login, String password){
		
		username = login;
		
		try {
			FileReader fr = new FileReader("D://qwerty//passwords.txt");
			BufferedReader br = new BufferedReader(fr);
			
			String sCurrentLine;

			try {
				
				while ((sCurrentLine = br.readLine()) != null) {
					
					String[] strl = sCurrentLine.split("|");
					if (strl[0]==login && strl[1]==password){
						System.out.println(sCurrentLine);
						return Math.random();
					}					
				
				}
			} catch (IOException e) {
				System.out.println("catch");
				e.printStackTrace();
			}
			
		} catch (FileNotFoundException e) {
			System.out.println("FileNotFoundException authorization");
		} finally {
			System.out.println("Finally authorization");
		}
		
	return 0.0;			
	}
}

public class Notebook {
	
	Notebook(){
		
	}
	
	public static void main(String[] args) {
		
		Controller cntrl = new Controller();
		cntrl.doAction("find,ewew");
		cntrl.doAction("insert,ewew");
		
		Loginator loginator = new Loginator();
		loginator.authorization("user1", "pass1");
		
		Loginator loginator2 = new Loginator();
		if (!loginator2.equals(loginator))
		{
			loginator.authorization("user1", "pass1");
		}
		else
		{
			System.out.println("Authoriation of the user is already done!");
		}
		
				
		@SuppressWarnings("resource")
		Scanner cin  = new Scanner(System.in);
		String str;
		int pos;
		System.out.println(" Input new command >>");
		
		while (cin.hasNext())
		{
			if (cin.hasNextLine())
			{				
				str = cin.nextLine();
				pos = str.toLowerCase().indexOf(("find").toLowerCase());
				if (pos > -1){
					String find = str.substring(pos+("find").length(), str.length());
					System.out.println("*"+find);					
				}
				
			}	
		}
	}
}

package controller;


public interface Command {
	
	String execute(String [] params);
}

import java.util.HashMap;
import java.util.Map;
import controller.Command;
import commands.Finder;
import commands.Inserter;
import commands.Updater;


public class CommandProvider {

		private Map<String, Command> commands = new HashMap<String, Command>();
		
		public CommandProvider (){
			commands.put("find", new Finder());
			commands.put("insert", new Inserter());
			commands.put("update", new Updater());
		}
		
		public Command getCommand(String commandName){
			
			System.out.println(commandName);
			
			Command command = commands.get(commandName);//LOGIN_USER
			return command;
		}
}


package commands;
import controller.Command;

import java.io.FileWriter;
import java.io.BufferedWriter;
//import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Writer;

public class Inserter implements Command {
	public String execute(String[] params) {
		
		
		Writer writer = null;

		try {
		    writer = new BufferedWriter(new FileWriter("D://qwerty//filename.txt", true));
		    
		    writer.write("123"+params[1]);
		    
		} catch (FileNotFoundException ex) {
			System.out.println("FileNotFoundException");
		} catch (IOException ex) {
			System.out.println("FileNotFoundException");
		} finally {
		   try {writer.close();} 
		   catch (Exception ex) {/*ignore*/}
		}
		
		
		return "123";
	}
}


package commands;
import controller.Command;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

public class Updater implements Command {
	public String execute(String[] params) {
	
		return "123";
	}
}


package commands;
import controller.Command;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;

public class Finder implements Command {

	public String execute(String[] params) {

		System.out.println("Finder");
		
		try {
			FileReader fr = new FileReader("D://qwerty//notebook.txt");
			BufferedReader br = new BufferedReader(fr);
			
			String sCurrentLine;

			try {
				
				System.out.println("Finder"+params[1]);
				
				while ((sCurrentLine = br.readLine()) != null) {
					
					String[] strl = sCurrentLine.split("|");
					System.out.println(sCurrentLine);
					if (strl[1] == params[1]){
					System.out.println(strl[1]);
					}
				}
			} catch (IOException e) {
				System.out.println("catch");
				e.printStackTrace();
			}
			
		} catch (FileNotFoundException e) {
			System.out.println("FileNotFoundException");
		} finally {
			System.out.println("Finally");
		}
		
		return "123";
	}
}

public class Note {
	
public int noteId;
private static int id;

Note()
{
	 this.noteId = id;
	 //System.out.println(this.noteId+"^");
	 id++;
}

Note(String text)
{
	 this.noteId = id;
	 //System.out.println(this.noteId+"*"+text);
	 id++;
}

}
